lessson 3
Q. What are some situations when branches would be 
helpful in keeping your history organized? How 
would branches help?

ans: when I want to experiment on your code, but 
     are worried about introducing bugs to your 
     code. Also allows you the flexibility to make
     big changes and try out new ideas. 

note: use branches when you're making an active change
      or moving on to a differet piece of work (content
      switching), whether is working on a new feature
      or fixing a bug.
master branch: production quality branch that never breaks
developement branch: active work is taking place
experimental branch
unique feature branches: things that you know might break

Braches also give you the ability to flexibility to switch 
what you're working on and work something else, and still 
have code that works and ability to test. 

Q. How do the diagrams help you visualize the branch structure?
ans: the diagrams creates a visual representation of where the
commits live and also explains their heirachy and reachability.

Q. What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

ans: The result will be marged changes that are different from
the last commit before the new branch was created.
We represent it in a diagram to show how the commits differ
with respect to their branches. Also shows the parent of each
commit.

Q. What are the pros and cons of Gitâ€™s automatic merging
 vs. always doing merges manually?
ans: 
pros of git auto vs matual merge:
- ability to work on seperate versions of the same 
file at the same time
- can test more than one idea for a porticular project and test
it with the master.
cons:
- it is time consuming as you may only have one version of the 
file


